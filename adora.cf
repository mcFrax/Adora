-- Adora language

entrypoints Module;

Module_. Module ::= [Stmt] ;

comment "#";

layout toplevel ;
layout ":" ;


-- -- --
-- Lexer - tokens

separator LowerIdent "," ;
position token Tok_Assert 'a''s''s''e''r''t' ;
position token Tok_Break 'b''r''e''a''k' ;
position token Tok_Continue 'c''o''n''t''i''n''u''e' ;
position token Tok_If 'i''f' ;
position token Tok_Elif 'e''l''i''f' ;
position token Tok_Else 'e''l''s''e' ;
position token Tok_Fn 'f''n' ;
position token Tok_Print 'p''r''i''n''t' ;
position token Tok_Return 'r''e''t''u''r''n' ;
position token Tok_Null 'n''u''l''l' ;
position token Tok_LP '(' ;
position token Tok_LTP '<''!' ;
position token Tok_Assign '=' ;
position token ModifyOper ( '+' | '-' | '*' | '/' | '/''/' ) '=' ;
position token LowerIdent ((lower | '_') (letter | digit | '_')*) ;
position token UpperIdent (upper (letter | digit | '_')*) ;
position token DollarIdent ('$' letter (letter | digit | '_')*) ;


-- -- --
-- Declarations


TypeDefinition_Alias.        AliasDefinition ::= "type" UpperIdent Tok_Assign Expr9 ;

TypeDefinition_Class.        ClassDefinition ::=
        "class" UpperIdent MaybeTemplateSgn Tok_LP [SuperType] ")" ":" "{"
            [VariantDefinition]
            [InClass]
        "}" ;

    separator VariantDefinition "" ;
    VariantDefinition_. VariantDefinition ::=
        "variant" UpperIdent ":" "{" [InStruct] "}" ;

    separator InClass ";" ;
    InClass_Pass.                InClass ::= "pass" ;
    InClass_AliasDef.            InClass ::= AliasDefinition ;
    InClass_ClassDef.            InClass ::= ClassDefinition ;
    InClass_PropertyDeclaration. InClass ::= PropMutability Expr9 LowerIdent ;
    InClass_MethodDeclaration.   InClass ::= "mth" LowerIdent MaybeTemplateSgn FSignature ;

    PropReadOnly.   PropMutability ::=  ;
    PropWritable.   PropMutability ::= "writable" ;

TypeDefinition_Struct.       StructDefinition ::=
        "struct" UpperIdent MaybeTemplateSgn Tok_LP [SuperType] ")" ":" "{"
            [InStruct]
        "}" ;

    separator InStruct ";" ;
    InStruct_Pass.           InStruct ::= "pass" ;
    InStruct_AliasDef.       InStruct ::= AliasDefinition ;
    InStruct_ClassDef.       InStruct ::= ClassDefinition ;
    InStruct_StructDef.      InStruct ::= StructDefinition ;
    InStruct_AttrDefinition. InStruct ::= Expr9 LowerIdent MaybeDefaultVal ;
    InStruct_InImplDecl.     InStruct ::= InImplDecl ;
    InStruct_ImplDefinition. InStruct ::= "implement" Expr9 ":" "{" [InImplDecl] "}" ;

        separator InImplDecl ";" ;
        InImplDecl_MethodDefinition.   InImplDecl ::= "mth" LowerIdent MaybeTemplateSgn FHeader StatementBlock ;
        InImplDecl_PropertyDefinition. InImplDecl ::= Expr9 LowerIdent ":" "{" "get" PropDefClause MaybeSetClause "}" ;

separator SuperType "," ;
SuperType_. SuperType ::= Expr9 ;

MaybeSetClause_None. MaybeSetClause ::= ;
MaybeSetClause_Some. MaybeSetClause ::= ";" "set" PropDefClause ;

PropDefClause_Def.      PropDefClause ::= StatementBlock ;
PropDefClause_Auto.     PropDefClause ::= "auto" ;

FSignature_. FSignature ::= Tok_LP [ArgSignature] ")" OptResultType ;

    separator ArgSignature "," ;
    ArgSignature_. ArgSignature ::= Expr9 LowerIdent ArgOptionality ;

        ArgMandatory. ArgOptionality ::= ;
        ArgOptional.  ArgOptionality ::= "?" ;

FHeader_.  FHeader ::= Tok_LP [ArgDefinition] ")" OptResultType ;

    separator ArgDefinition "," ;
    ArgDefinition_. ArgDefinition ::= Expr9 LowerIdent MaybeDefaultVal ;

OptResultType_None. OptResultType ::= ;
OptResultType_Some. OptResultType ::= "->" Expr9;

MaybeDefaultVal_None. MaybeDefaultVal ::= ;
MaybeDefaultVal_Some. MaybeDefaultVal ::= Tok_Assign Expr ;



-- Sgn == Signature
MaybeTemplateSgn_None.  MaybeTemplateSgn ::= ;
MaybeTemplateSgn_Some.  MaybeTemplateSgn ::= Tok_LTP [TypeParamDef] "!>" ;

separator TypeParamDef "," ;
TypeParamDef_.  TypeParamDef ::= DollarIdent MaybeSuperclasses MaybeSubclasses ;

MaybeSuperclasses_None. MaybeSuperclasses ::= ;
MaybeSuperclasses_Some. MaybeSuperclasses ::= "<" Expr9 ;

MaybeSubclasses_None. MaybeSubclasses ::= ;
MaybeSubclasses_Some. MaybeSubclasses ::= ">" Expr9 ;


-- -- --
-- Statements

-- Blocks

StatementBlock_. StatementBlock ::= ":" "{" [Stmt] "}" ;

separator Stmt ";" ;

-- Statements

Stmt_ClassDef.      Stmt ::= ClassDefinition ;
Stmt_StructDef.     Stmt ::= StructDefinition ;
Stmt_AliasDef.      Stmt ::= AliasDefinition ;
Stmt_Expr.          Stmt ::= Expr ;
Stmt_Let.           Stmt ::= "let" LowerIdent Tok_Assign Expr ;  -- constant
Stmt_LetTuple.      Stmt ::= "let" Tok_LP [LowerIdent] ")" Tok_Assign Expr ;  -- tuple unpacking
Stmt_Var.           Stmt ::= "var" LowerIdent Tok_Assign Expr ;  -- variable
Stmt_Assign.        Stmt ::= Expr Tok_Assign Expr;
Stmt_Modify.        Stmt ::= Expr ModifyOper Expr;
Stmt_Return.        Stmt ::= Tok_Return ;
Stmt_ReturnValue.   Stmt ::= Tok_Return Expr ;
Stmt_If.            Stmt ::= Tok_If Expr StatementBlock ;
Stmt_Elif.          Stmt ::= Tok_Elif Expr StatementBlock ;
Stmt_Else.          Stmt ::= Tok_Else StatementBlock ;
Stmt_Case.          Stmt ::= "case" Expr "class" "of" ":" "{" [CaseClause] "}";
Stmt_While.         Stmt ::= "while" Expr  StatementBlock ;
Stmt_ForIn.         Stmt ::= "for" LowerIdent "in" Expr StatementBlock ;
Stmt_For.           Stmt ::= "for" LowerIdent Tok_Assign Expr "then" Expr StatementBlock ;
Stmt_ForWhile.      Stmt ::= "for" LowerIdent Tok_Assign Expr "then" Expr "while" Expr StatementBlock ;
Stmt_Break.         Stmt ::= Tok_Break ;
Stmt_Continue.      Stmt ::= Tok_Continue ;
Stmt_Assert.        Stmt ::= Tok_Assert Expr ;
Stmt_Print.         Stmt ::= Tok_Print ;
Stmt_PrintValues.   Stmt ::= Tok_Print [Expr] ;
Stmt_Memdump.       Stmt ::= "dumpmem" ;
Stmt_Pass.          Stmt ::= "pass" ;

separator CaseClause "" ;
CaseClause_Unnamed.  CaseClause ::= [Expr9] StatementBlock ;

-- -- --
-- Expressions

-- -- --
-- Type names

separator nonempty Expr "," ;
separator nonempty Expr9 "," ;
_.              Expr ::= Expr0 ;

_.              Expr0 ::= Expr1 ;
Expr_Lambda.    Expr0 ::= Tok_Fn FHeader StatementBlock ;

_.              Expr1 ::= Expr2 ;
Expr_If.        Expr1 ::= Tok_If Expr "then" Expr Tok_Else Expr ;

_.              Expr2 ::= Expr3 ;
Expr_Or.        Expr2 ::= Expr2 "or" Expr3 ;

_.              Expr3 ::= Expr4 ;
Expr_And.       Expr3 ::= Expr3 "and" Expr4 ;

_.              Expr4 ::= Expr5 ;
Expr_Not.       Expr4 ::= "not" Expr4 ;
-- Expr_In.        Expr4 ::= Expr5 "in" Expr5 ;
-- Expr_NotIn.     Expr4 ::= Expr5 "not" "in" Expr5 ;

_.              Expr5 ::= Expr6 ;
Expr_RelOper.   Expr5 ::= Expr5 RelOper Expr6 ;

RelOper_Id.  RelOper ::= "===" ;
RelOper_Nid. RelOper ::= "!==" ;
RelOper_Eq.  RelOper ::= "==" ;
RelOper_Neq. RelOper ::= "!=" ;
RelOper_Lt.  RelOper ::= "<" ;
RelOper_Lte. RelOper ::= "<=" ;
RelOper_Gt.  RelOper ::= ">" ;
RelOper_Gte. RelOper ::= ">=" ;

_.              Expr6 ::= Expr7 ;
Expr_Add.       Expr6 ::= Expr6 "+" Expr7 ;
Expr_Sub.       Expr6 ::= Expr6 "-" Expr7 ;

_.              Expr7 ::= Expr8 ;
Expr_Mul.       Expr7 ::= Expr7 "*" Expr8 ;
Expr_Div.       Expr7 ::= Expr7 "/" Expr8 ;
Expr_IntDiv.    Expr7 ::= Expr7 "//" Expr8 ;
Expr_Mod.       Expr7 ::= Expr7 "%" Expr8 ;

_.              Expr8 ::= Expr9 ;
Expr_Minus.     Expr8 ::= "-" Expr8 ;
-- Expr_Plus.      Expr8 ::= "+" Expr8 ;

_.              Expr9 ::= Expr10 ;
Expr_Cast.      Expr9 ::= Expr10 "as" Expr10 ;
Expr_Is.        Expr9 ::= Expr10 "is" Expr10 ;  -- isinstance
Expr_FnType.    Expr9 ::= FSignature ;

_.              Expr10 ::= Expr11 ;
Expr_Index.     Expr10 ::= Expr10 "[" Expr "]" ;
Expr_Attr.      Expr10 ::= Expr10 "." "[" LowerIdent "]" ;  -- direct access to struct fields
Expr_Prop.      Expr10 ::= Expr10 "." LowerIdent;
Expr_TupSubscr. Expr10 ::= Expr10 "." Integer ;  -- tuple subscript
Expr_FunCall.   Expr10 ::= Expr10 Tok_LP [FunCallArg] ")" ;
Expr_TmplAppl.  Expr10 ::= Expr10 Tok_LTP [Expr] "!>" ;
Expr_NestedType.Expr10 ::= Expr10 "." UpperIdent ;

separator FunCallArg "," ;
FunCallArg_Positional. FunCallArg ::= Expr ;
FunCallArg_Keyword.    FunCallArg ::= LowerIdent Tok_Assign Expr ;

_.              Expr11 ::= Expr12 ;
Expr_Null.      Expr11 ::= Tok_Null ;
Expr_Char.      Expr11 ::= Char ;
Expr_String.    Expr11 ::= String ;
Expr_Double.    Expr11 ::= Double ;
Expr_Int.       Expr11 ::= Integer ;
Expr_Array.     Expr11 ::= LstVal ;
Expr_Var.       Expr11 ::= LowerIdent ;
Expr_TypeName.  Expr11 ::= UpperIdent ;
Expr_TypeVar.   Expr11 ::= DollarIdent ;

LstVal_None.   LstVal ::= "[" "]" ;
LstVal_Some.   LstVal ::= "[" [Expr] "]" ;

Expr_Parens.   Expr12 ::= Tok_LP [Expr] ")" ;
-- wspolny nieterminal dla wyrazenia w nawiasie i krotki
