class Nillable():
    Bool isNil

class List(Nillable):
    pass

class RootedTree(Nillable):
    pass

class BinTree(RootedTree):
    pass

struct Cons():
    Int head
    List tail
    Bool isNil:
        get:
            return false
    implement List:
        pass

struct Nil():
    Bool isNil:
        get:
            return true
    implement Nillable:
        pass
    implement List:
        pass
    implement BinTree:
        pass

let nil = Nil()

struct Node():
    Int value
    BinTree left
    BinTree right
    Bool isNil:
        get:
            return false
    implement BinTree:
        pass

type String = Array[Char]

fn printStr(String string):
    pass  # placeholder

fn putChar(Char char):
    pass  # placeholder

fn printLn(String string):
    printStr(string);
    putChar('\n');

fn getChar() -> Char:
    return ' '  # placeholder

fn getLine() -> String:
    pass  # placeholder
